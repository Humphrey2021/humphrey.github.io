{"title":"Yeoman入门--实现属于自己的脚手架","date":"2022-01-15T05:37:52.000Z","date_formatted":{"ll":"Jan 15, 2022","L":"01/15/2022","MM-DD":"01-15"},"link":"2022/01/15/Yeoman入门-实现属于自己的脚手架","tags":["yeoman","前端自动化构建","脚手架"],"categories":["前端"],"updated":"2022-01-16T09:27:37.913Z","content":"<h2 id=\"脚手架工具开发\">脚手架工具开发<a title=\"#脚手架工具开发\" href=\"#脚手架工具开发\"></a></h2>\n<blockquote>\n<p>脚手架的本质作用就是为了创建项目的基本结构，提供项目的规范和约定<br>\n<strong>一切技术都是为了解决问题而存在的。</strong><br>\n我们在不同的项目中，可以会存在很多相同的地方，如：组织结构、开发范式、模块依赖、工具配置、基础代码。为了方便，避免做太多重复操作，所以就出现了脚手架。</p>\n</blockquote>\n<p>目前常用的脚手架工具<br>\nreact   ==&gt;  creat-reate-app<br>\nvue     ==&gt;  vue-cli<br>\nangular ==&gt;  angular-cli</p>\n<p>但今天我们要说说另外一种【<code>Yeoman</code>】，这是一款通用型的脚手架</p>\n<h2 id=\"yeoman\"><a href=\"https://yeoman.io/\">Yeoman</a><a title=\"#yeoman\" href=\"#yeoman\"></a></h2>\n<p>&lt; THE WEB’S SCAFFOLDING TOOL FOR MODERN WEBAPPS &gt;<br>\n可以搭配不同的<code>Generator</code>去生成不同的项目</p>\n<h3 id=\"基本使用\">基本使用<a title=\"#基本使用\" href=\"#基本使用\"></a></h3>\n<ul>\n<li>第一步当然是安装了，但在安装之前需要检查是否安装了<code>node</code>和<code>npm</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br><span class=\"line\">npm -v</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 因为比较习惯用 yarn，后续代码也是使用yarn去代替npm</span></span><br><span class=\"line\">yarn -v</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装 yeoman</span></span><br><span class=\"line\">yarn global add yo</span><br></pre></td></tr></table></figure>\n<p>前面说了<code>yeoman</code>需要搭配不同的<code>Generator</code>去生成项目</p>\n<ul>\n<li>安装<code>generator</code>模块<br>\n这里以<code>node</code>为例</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn global add generator-node</span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行<code>generator</code>生成项目</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 运行generator就是使用yo命令后面跟着 去掉generator-后的内容</span></span><br><span class=\"line\">yo node</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在命令行选择填写对应的内容，即可生成对应的项目</span></span><br></pre></td></tr></table></figure>\n<p>到此我们就生成了一个node项目</p>\n<h3 id=\"使用yeoman步骤\">使用Yeoman步骤<a title=\"#使用yeoman步骤\" href=\"#使用yeoman步骤\"></a></h3>\n<p>因为使用<code>yeoman</code>可以生成任何项目，所以我们在使用之前需要明确的步骤</p>\n<ol>\n<li>明确项目需求</li>\n<li>找到合适的<code>generator</code></li>\n<li>全局范围安装找到的<code>generator</code></li>\n<li>通过<code>yo</code>运行对应的<code>generator</code></li>\n<li>通过命令行交互填写选项</li>\n<li>生成所需要的项目结构</li>\n</ol>\n<h3 id=\"自定义自己的generator\">自定义自己的Generator<a title=\"#自定义自己的generator\" href=\"#自定义自己的generator\"></a></h3>\n<p>&lt;基于Yeoman搭建自己的脚手架&gt;<br>\n创建 Generator 模块 &lt;generator模块本质上就是一个npm模块&gt;<br>\ngenerator模块规定名称格式为 generator-<name></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir generator-self # 创建generator模块文件</span><br><span class=\"line\">cd generator-self # 进入这个文件夹</span><br><span class=\"line\">yarn init # 生成package.json文件</span><br><span class=\"line\">yarn add yeoman-generator # 安装yeoman的generator模块</span><br><span class=\"line\">mkdir generators # 创建生成器目录</span><br><span class=\"line\">mkdir generators/app # 创建默认生成器目录</span><br><span class=\"line\">touch generators/app/index.js # 创建默认生成器实现的文件</span><br></pre></td></tr></table></figure>\n<p>至此，生成了一个目录结构</p>\n<figure class=\"highlight m\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── generators          // 生成器目录</span><br><span class=\"line\">│   └── app             // 默认生成器目录</span><br><span class=\"line\">│       └── index.js    // 默认生成器实现</span><br><span class=\"line\">├── node_modules</span><br><span class=\"line\">└── package.json</span><br></pre></td></tr></table></figure>\n<ul>\n<li>最主要的文件就是 generators/app/index.js</li>\n</ul>\n<p>此文件作为 Generator 的核心入口文件<br>\n需要导出一个继承自 Yeoman Generator 的类型<br>\nYeoman Generator 在工作时会自动调用我们在此类型中定义的一些生命周期方法<br>\n我们在这些方法中可以通过调用父类提供的一些工具方法来实现一些功能，例如文件写入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Generator = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;yeoman-generator&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"title\">Generator</span> </span>&#123;</span><br><span class=\"line\">    writing () &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Yeoman 自动在生成文件阶段调用此方法</span></span><br><span class=\"line\">        <span class=\"comment\">// 我们这里尝试往项目目录中写入文件</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.fs.write()</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.destinationPath(<span class=\"string\">&#x27;temp.txt&#x27;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">Math</span>.random().toString()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编写完成之后，需要将此模块链接到全局，将其变为全局模块包</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn link</span><br></pre></td></tr></table></figure>\n<p>此时我们换一个文件夹</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yo self # self 为刚刚写的生成器的名字</span><br></pre></td></tr></table></figure>\n<p>这就是yeoman生成器最基本的开发过程</p>\n<h4 id=\"根据模版去创建文件\">根据模版去创建文件<a title=\"#根据模版去创建文件\" href=\"#根据模版去创建文件\"></a></h4>\n<p>一个项目的基础结构是有很多个文件的，如果都手动去创建文件写入内容，那将会变得特别繁琐，所以我们可以将基础结构直接写好，然后通过模版的方式去创建整个项目结构,这样可以大大的提高效率</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir generators/app/templates # 创建模版文件夹</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 这个文件夹内部的文件就将会作为模版文件去解析</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 例：创建一个 foo.txt 模版</span></span><br><span class=\"line\">touch generators/app/templates/foo.txt</span><br></pre></td></tr></table></figure>\n<p>在 foo.txt 中</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">内部可以使用 EJS 模版标记输出数据</span><br><span class=\"line\">例如: &lt;%= title %&gt;</span><br><span class=\"line\">其他的 EJS 语法也支持</span><br><span class=\"line\">&lt;% if (success) &#123; %&gt;</span><br><span class=\"line\">啦啦啦</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br><span class=\"line\">注意：如果内部有属于自己的模版语法，则需要再加一个%</span><br><span class=\"line\">&lt;%= BASE_URL %&gt; ===&gt; &lt;%%= BASE_URL %&gt;</span><br></pre></td></tr></table></figure>\n<p>回到 app/index.js 中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">... <span class=\"comment\">// 省略</span></span><br><span class=\"line\">writing () &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过模版方式写入文件到目标目录</span></span><br><span class=\"line\">    <span class=\"comment\">// 模版文件路径</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> tmpl = <span class=\"built_in\">this</span>.templatePath(<span class=\"string\">&#x27;foo.txt&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 输出目标路径</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> outPut = <span class=\"built_in\">this</span>.destinationPath(<span class=\"string\">&#x27;foo.txt&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 模版数据上下文</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> context = &#123; <span class=\"attr\">title</span>: <span class=\"string\">&#x27;hello&#x27;</span>, <span class=\"attr\">success</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.fs.copyTpl(tmpl, outPut, context)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h4 id=\"接收用户输入数据\">接收用户输入数据<a title=\"#接收用户输入数据\" href=\"#接收用户输入数据\"></a></h4>\n<p>通过命令行交互的方式，获取用户的输入。提示模块由 <a href=\"https://github.com/SBoudrias/Inquirer.js\" target=\"_blank\">Inquirer.js</a> 提供。可以参考<a href=\"https://github.com/SBoudrias/Inquirer.js\" target=\"_blank\">官方文档查询API</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 依然是在 app/index.js 文件中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">prompting</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Yeoman 在询问用户环节会自动调用此方法</span></span><br><span class=\"line\">    <span class=\"comment\">// 在此方法中可以调用父类的 prompt() 方法发出对用户的命令行询问</span></span><br><span class=\"line\">    <span class=\"comment\">// 参数为一个数组</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.prompt([</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            type: <span class=\"string\">&#x27;input&#x27;</span>,</span><br><span class=\"line\">            name: <span class=\"string\">&#x27;name&#x27;</span>,</span><br><span class=\"line\">            message: <span class=\"string\">&#x27;Your project name&#x27;</span>,</span><br><span class=\"line\">            <span class=\"keyword\">default</span>: <span class=\"built_in\">this</span>.appname <span class=\"comment\">// appname 为项目生成目录名称</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]).then(<span class=\"function\"><span class=\"params\">answers</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// answers =&gt; &#123; name: &#x27;user input value&#x27; &#125;</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.answers = answers</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">writing () &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">const</span> context = <span class=\"built_in\">this</span>.answers</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到此，我们就已经可以去实现一个自己的<code>Generator</code>了</p>\n<h4 id=\"发布-generator\">发布 Generator<a title=\"#发布-generator\" href=\"#发布-generator\"></a></h4>\n<p>当写好了自己的<code>Generator</code>后,一般会将此项目托管到远程的仓库中。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建排除文件</span></span><br><span class=\"line\">echo node_modules &gt; .gitignore</span><br><span class=\"line\">git init</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &#x27;init&#x27;</span><br><span class=\"line\">git remote add origin https://github.com/user/generator-self</span><br><span class=\"line\">git push -u origin master</span><br><span class=\"line\"></span><br><span class=\"line\">yarn publish # 发布</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 国内一般会使用淘宝镜像源取代官方的镜像，所以可能会报错</span></span><br><span class=\"line\">yarn publish --registry=https://registry.yarnpkg.com</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在npm官网就可以查看到这个模块</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 随后就可以全局安装使用了</span></span><br></pre></td></tr></table></figure>\n<p>如果想让自己的 Generator 在 yeoman 官方的仓库列表中也出现的话，可以在项目中添加一个 yeoman-generator 的关键词，这个时候yeoman官方会发现你的项目。</p>\n","next":{"title":"自动化构建","link":"2022/01/05/自动化构建"},"plink":"https://rdhuang.gitee.io/2022/01/15/Yeoman入门-实现属于自己的脚手架/","toc":[{"id":"脚手架工具开发","title":"脚手架工具开发","index":"1"},{"id":"yeoman","title":"Yeoman","index":"2","children":[{"id":"基本使用","title":"基本使用","index":"2.1"},{"id":"使用yeoman步骤","title":"使用Yeoman步骤","index":"2.2"},{"id":"自定义自己的generator","title":"自定义自己的Generator","index":"2.3"}]}],"copyright":{"author":"Humphrey","link":"<a href=\"https://rdhuang.gitee.io/2022/01/15/Yeoman入门-实现属于自己的脚手架/\" title=\"Yeoman入门--实现属于自己的脚手架\">https://rdhuang.gitee.io/2022/01/15/Yeoman入门-实现属于自己的脚手架/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}