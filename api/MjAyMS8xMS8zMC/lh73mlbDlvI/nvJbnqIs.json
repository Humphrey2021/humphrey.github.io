{"title":"函数式编程","date":"2021-11-30T15:45:00.000Z","date_formatted":{"ll":"Nov 30, 2021","L":"11/30/2021","MM-DD":"11-30"},"link":"2021/11/30/函数式编程","tags":["javascript","函数式编程"],"categories":["前端"],"updated":"2021-12-02T12:01:25.849Z","content":"<!-- ## 为什么要学函数式编程？\n\n - 随着 React 的流行受到越来越多的关注\n - Vue3也开始拥抱函数式编程\n - 函数式编程可以抛弃 this\n - 打包过程中可以更好的利用 tree shaking 过滤无用代码\n - 方便测试，方便并行处理\n - 有很多库可以帮助我们进行函数式开发：lodash, undersoore, ramda -->\n<h2 id=\"函数式编程概念\">函数式编程概念<a title=\"#函数式编程概念\" href=\"#函数式编程概念\"></a></h2>\n<p><a href=\"https://baike.baidu.com/item/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/4035031?fr=aladdin\" target=\"_blank\">函数式编程</a>（Functional Programming, FP）是一种&quot;编程范式&quot;（programming paradigm），也就是如何编写程序的方法论。<br>\n它属于&quot;结构化编程&quot;的一种，主要思想是把运算过程尽量写成一系列嵌套的函数调用。 就是对运算过程进行抽象，函数式编程中函数指的不是程序中的函数（方法），而是数学中的函数即映射关系。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 非函数式编程</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> num1 = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> num2 = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> sum = num1 + num2</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span> (<span class=\"params\">n1, n2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n1 + n2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> sum = add(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum)</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数式编程的特性\">函数式编程的特性<a title=\"#函数式编程的特性\" href=\"#函数式编程的特性\"></a></h2>\n<ul>\n<li>\n<p><strong>函数是“第一等公民（first class）”</strong><br>\n<em>&quot;第一等公民&quot;指的是函数与其他数据类型一样，处于平等地位,可以赋值给其他变量，也可以作为参数，传入另一个函数，或者作为别的函数的返回值。</em></p>\n<ul>\n<li><strong>函数可以赋值给其他变量</strong></li>\n</ul>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fn = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;我可以存储在变量中&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 示例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    index (posts) &#123; <span class=\"keyword\">return</span> Views.index(posts) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 优化</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    index: Views.index</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>高阶函数(Higher-order function)</strong></p>\n<ul>\n<li><strong>可以把函数作为参数传递给另一个函数</strong></li>\n</ul>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// forEach</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> forEach = <span class=\"function\">(<span class=\"params\">array, fn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; array.length; i ++) &#123;</span><br><span class=\"line\">        fn(array[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">forEach(arr, <span class=\"function\"><span class=\"params\">i</span> =&gt;</span> &#123; <span class=\"built_in\">console</span>.log(i) &#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>可以把函数作为另一个函数的返回结果</strong></li>\n</ul>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> once = <span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> flag = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\">// 注意：这里返回的函数如果写成箭头函数的话，会找不到 this</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!flag) &#123;</span><br><span class=\"line\">            flag = <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> fn.apply(<span class=\"built_in\">this</span>, <span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> pay = once(<span class=\"function\"><span class=\"params\">money</span> =&gt;</span> &#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">`支付了<span class=\"subst\">$&#123;money&#125;</span>元`</span>) &#125;)</span><br><span class=\"line\">pay(<span class=\"number\">5</span>)</span><br><span class=\"line\">pay(<span class=\"number\">5</span>)</span><br><span class=\"line\">pay(<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>闭包(Closure)</strong><br>\n<em>函数和其周围的状态（词法环境）的引用捆绑在一起形成闭包</em></p>\n<ul>\n<li>\n<p><strong>可以在另一个作用域中调用一个函数的内部函数并访问到该函数的作用域中的成员</strong></p>\n</li>\n<li>\n<p>本质：函数在执行的时候会放到一个执行栈上，当函数执行完毕之后会从执行栈上移除，<strong>但是堆上的作用域成员因为被外部引用不能释放</strong>，因此内部函数依然可以访问外部函数的成员</p>\n</li>\n</ul>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 案例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makePower</span> (<span class=\"params\">power</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">number</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.pow(number, power)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 优化写法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> makePower = <span class=\"function\"><span class=\"params\">power</span> =&gt;</span> <span class=\"function\"><span class=\"params\">num</span> =&gt;</span> <span class=\"built_in\">Math</span>.pow(num, power)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> power2 = makePower(<span class=\"number\">2</span>) <span class=\"comment\">// 求平方</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> power3 = makePower(<span class=\"number\">3</span>) <span class=\"comment\">// 求立方</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(power2(<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(power2(<span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(power3(<span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>纯函数</strong></p>\n<ul>\n<li><strong>相同的输入永远会得到相同的输出</strong>, 而且没有任何可观察的副作用</li>\n</ul>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"comment\">// 纯函数</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.slice(<span class=\"number\">0</span>, <span class=\"number\">3</span>)) <span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.slice(<span class=\"number\">0</span>, <span class=\"number\">3</span>)) <span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不纯函数</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.splice(<span class=\"number\">0</span>, <span class=\"number\">3</span>)) <span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.splice(<span class=\"number\">0</span>, <span class=\"number\">3</span>)) <span class=\"comment\">// [4, 5]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.splice(<span class=\"number\">0</span>, <span class=\"number\">3</span>)) <span class=\"comment\">// []</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>惰性计算</strong><br>\n在惰性计算中，表达式不是在绑定到变量时立即计算，而是在求值程序需要产生表达式的值时进行计算。</p>\n</li>\n<li>\n<p><strong>递归</strong><br>\nFP 还有一个特点是用递归做为控制流程的机制。</p>\n</li>\n<li>\n<p><strong>只用&quot;表达式&quot;，不用&quot;语句&quot;</strong></p>\n</li>\n<li>\n<p><strong>没有&quot;副作用&quot;</strong><br>\n所谓&quot;副作用&quot;（side effect），指的是函数内部与外部互动（最典型的情况，就是修改全局变量的值），产生运算以外的其他结果。</p>\n<p>函数式编程强调没有&quot;副作用&quot;，意味着函数要保持独立，所有功能就是返回一个新的值，没有其他行为，尤其是不得修改外部变量的值。</p>\n</li>\n<li>\n<p><strong>不修改状态</strong><br>\n函数式编程只是返回新的值，不修改系统变量。因此，不修改变量，也是它的一个重要特点。</p>\n</li>\n<li>\n<p><strong>引用透明性</strong><br>\n函数程序通常还加强引用透明性，即如果提供同样的输入，那么函数总是返回同样的结果。</p>\n</li>\n<li>\n<p><strong>副作用</strong><br>\n副作用是修改系统状态的语言结构。因为 FP 语言不包含任何赋值语句，变量值一旦被指派就永远不会改变。而且，调用函数只会计算出结果 ── 不会出现其他效果。因此，FP 语言没有副作用。</p>\n</li>\n</ul>\n<h2 id=\"函数式编程的优点\">函数式编程的优点<a title=\"#函数式编程的优点\" href=\"#函数式编程的优点\"></a></h2>\n<ol>\n<li>代码简洁，开发快速</li>\n<li>接近自然语言，易于理解</li>\n<li>更方便代码管理</li>\n<li>易于“并发编程”</li>\n<li>代码的热升级</li>\n</ol>\n<h2 id=\"函数式编程基础\">函数式编程基础<a title=\"#函数式编程基础\" href=\"#函数式编程基础\"></a></h2>\n<h3 id=\"lodash\">lodash<a title=\"#lodash\" href=\"#lodash\"></a></h3>\n<h3 id=\"纯函数\">纯函数<a title=\"#纯函数\" href=\"#纯函数\"></a></h3>\n<h3 id=\"函数柯里化\">函数柯里化<a title=\"#函数柯里化\" href=\"#函数柯里化\"></a></h3>\n<blockquote>\n<p>在计算机科学中，柯里化（Currying）是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。这个技术由 Christopher Strachey 以逻辑学家 Haskell Curry 命名的，尽管它是 Moses Schnfinkel 和 Gottlob Frege 发明的。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 简单的举例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> add = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b</span><br><span class=\"line\"><span class=\"comment\">// Currying 后</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> curryingAdd = <span class=\"function\"><span class=\"params\">a</span> =&gt;</span> <span class=\"function\"><span class=\"params\">b</span> =&gt;</span> a + b</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">1</span>, <span class=\"number\">2</span>) <span class=\"comment\">// 3</span></span><br><span class=\"line\">curryingAdd(<span class=\"number\">1</span>)(<span class=\"number\">2</span>) <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<p>由此可以看出，柯里化一个函数，就是把原可以接收多个参数的函数变换成只接收单一参数，并用返回的函数接收余下的参数且返回结果的技术。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 例：判断年龄基准值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkAge</span> (<span class=\"params\">min, age</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> age &gt;= min</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Currying 后</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkAge</span> (<span class=\"params\">min</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">age</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age &gt;= min</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ES6 写法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> checkAge = <span class=\"function\"><span class=\"params\">min</span> =&gt;</span> (<span class=\"function\"><span class=\"params\">age</span> =&gt;</span> age &gt;= min)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> checkAge18 = checkAge(<span class=\"number\">18</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> checkAge20 = checkAge(<span class=\"number\">20</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">checkAge18(<span class=\"number\">16</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\">checkAge18(<span class=\"number\">20</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">checkAge20(<span class=\"number\">18</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\">checkAge20(<span class=\"number\">22</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 模拟实现 lodash 中的 curry 方法 （传入一个函数，把该函数转换为柯里化函数）</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> curry = <span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curriedFn</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (args.length &lt; fn.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> curriedFn(...args.concat(<span class=\"built_in\">Array</span>.from(<span class=\"built_in\">arguments</span>)))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fn(...args)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getSum = <span class=\"function\">(<span class=\"params\">a, b, c</span>) =&gt;</span> (a + b + c)</span><br><span class=\"line\"><span class=\"keyword\">const</span> curried = curry(getSum)</span><br><span class=\"line\"></span><br><span class=\"line\">curried(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>) <span class=\"comment\">// 6</span></span><br><span class=\"line\">curried(<span class=\"number\">1</span>, <span class=\"number\">2</span>)(<span class=\"number\">3</span>) <span class=\"comment\">// 6</span></span><br><span class=\"line\">curried(<span class=\"number\">1</span>)(<span class=\"number\">2</span>, <span class=\"number\">3</span>) <span class=\"comment\">// 6</span></span><br><span class=\"line\">curried(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>) <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n<p><strong>总结</strong></p>\n<ul>\n<li>\n<p>柯里化可以让我们给一个函数传递较少的参数得到一个已经记住了某些固定参数的新函数</p>\n</li>\n<li>\n<p>这是一种对函数参数的‘缓存’</p>\n</li>\n<li>\n<p>让函数变得更灵活，让函数的粒度更小</p>\n</li>\n<li>\n<p>可以把多元函数转换成一元函数，可以组合使用，产生强大的功能</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">面试题：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现一个add方法，使计算结果能够满足如下预期：</span></span><br><span class=\"line\"><span class=\"comment\">// add(1)(2)(3) = 6;</span></span><br><span class=\"line\"><span class=\"comment\">// add(1, 2, 3)(4) = 10;</span></span><br><span class=\"line\"><span class=\"comment\">// add(1)(2)(3)(4)(5) = 15;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> add = <span class=\"function\">(<span class=\"params\">...rest</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fn = <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        rest.push(...args)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fn</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fn.toString = <span class=\"function\">() =&gt;</span> rest.reduce(<span class=\"function\">(<span class=\"params\">total, num</span>) =&gt;</span> total + num, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fn</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(+add(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)) <span class=\"comment\">// 6</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(+add(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)(<span class=\"number\">4</span>)) <span class=\"comment\">// 10</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(+add(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)(<span class=\"number\">4</span>)(<span class=\"number\">5</span>)) <span class=\"comment\">// 15</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"管道\">管道<a title=\"#管道\" href=\"#管道\"></a></h3>\n<h3 id=\"组合函数\">组合函数<a title=\"#组合函数\" href=\"#组合函数\"></a></h3>\n<ul>\n<li>\n<p>函数组合（compose）：如果一个函数要经过多个函数处理才能得到最终值，这个时候可以把中间的过程函数合并成一个函数</p>\n</li>\n<li>\n<p>函数组合默认是从右到左执行</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实现一个组合函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compose</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> args.reverse().reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">acc, fn</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fn(acc)</span><br><span class=\"line\">        &#125;, value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ES6改造一下</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> compose = <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> args.reverse().reduce(<span class=\"function\">(<span class=\"params\">acc, fn</span>) =&gt;</span> fn(acc), value)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fn1 = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> arr.reverse()</span><br><span class=\"line\"><span class=\"keyword\">const</span> fn2 = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> arr[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> fn3 = <span class=\"function\"><span class=\"params\">str</span> =&gt;</span> str.toUpperCase()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> f = compose(fn3, fn2, fn1)</span><br><span class=\"line\"><span class=\"comment\">// const f = compose(compose(fn3, fn2), fn1)</span></span><br><span class=\"line\"><span class=\"comment\">// const f = compose(fn3, compose(fn2, fn1))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f([<span class=\"string\">&#x27;one&#x27;</span>, <span class=\"string\">&#x27;two&#x27;</span>, <span class=\"string\">&#x27;three&#x27;</span>])) <span class=\"comment\">// THREE</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>函数组合要满足<strong>结合律</strong>(associativity)</li>\n</ul>\n<p>我们既可以把 <code>a</code> 和 <code>b</code> 组合，还可以把 <code>b</code> 和 <code>c</code> 组合，结果都是一样的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 结合律</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> f = compose(a, b, c)</span><br><span class=\"line\">compose(compose(a, b), c) == compose(a, compose(b, c))</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>组合函数的调试</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> _ = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;lodash&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 需要写一个辅助函数做调试</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> trace = _.curry(<span class=\"function\">(<span class=\"params\">tag, v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(tag, v)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 将此辅助函数插入到组合函数中即可</span></span><br><span class=\"line\">compose(a, trace(<span class=\"string\">&#x27;我在b之后&#x27;</span>)， b, trace(<span class=\"string\">&#x27;我在c之后&#x27;</span>), c)</span><br></pre></td></tr></table></figure>\n<p><strong>Point Free模式</strong></p>\n<p>我们可以把数据处理的过程定义成与数据无关的合成运算，不需要用到代表数据的那个参数，只要把简单的运算步骤合成到一起，在使用这种模式之前我们需要定义一些辅助的基本运算函数</p>\n<ul>\n<li>不需要指明处理的数据</li>\n<li>只需要合成运算过程</li>\n<li>需要定义一些辅助的基本运算函数</li>\n</ul>\n<p>案例演示</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Hello World =&gt; hello_world</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 非 Point Free 模式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span> (<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str.toLowerCase().replace(<span class=\"regexp\">/\\s+/g</span>, <span class=\"string\">&#x27;_&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Point Free</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;lodash/fp&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> f = fp.flowRight(fp.replace(<span class=\"regexp\">/\\s+/g</span>, <span class=\"string\">&#x27;_&#x27;</span>), fp.toLower)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f(<span class=\"string\">&#x27;Hello World&#x27;</span>)) <span class=\"comment\">// hello_world</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"函子\">函子<a title=\"#函子\" href=\"#函子\"></a></h2>\n<h3 id=\"functor\">Functor<a title=\"#functor\" href=\"#functor\"></a></h3>\n<h3 id=\"maybe\">MayBe<a title=\"#maybe\" href=\"#maybe\"></a></h3>\n<h3 id=\"either\">Either<a title=\"#either\" href=\"#either\"></a></h3>\n<h3 id=\"io\">IO<a title=\"#io\" href=\"#io\"></a></h3>\n<h3 id=\"task\">Task<a title=\"#task\" href=\"#task\"></a></h3>\n<p>folktale</p>\n<h3 id=\"monad\">Monad<a title=\"#monad\" href=\"#monad\"></a></h3>\n","plink":"https://rdhuang.gitee.io/2021/11/30/函数式编程/","toc":[{"id":"函数式编程概念","title":"函数式编程概念","index":"1"},{"id":"函数式编程的特性","title":"函数式编程的特性","index":"2"},{"id":"函数式编程的优点","title":"函数式编程的优点","index":"3"},{"id":"函数式编程基础","title":"函数式编程基础","index":"4","children":[{"id":"lodash","title":"lodash","index":"4.1"},{"id":"纯函数","title":"纯函数","index":"4.2"},{"id":"函数柯里化","title":"函数柯里化","index":"4.3"},{"id":"管道","title":"管道","index":"4.4"},{"id":"组合函数","title":"组合函数","index":"4.5"}]},{"id":"函子","title":"函子","index":"5","children":[{"id":"functor","title":"Functor","index":"5.1"},{"id":"maybe","title":"MayBe","index":"5.2"},{"id":"either","title":"Either","index":"5.3"},{"id":"io","title":"IO","index":"5.4"},{"id":"task","title":"Task","index":"5.5"},{"id":"monad","title":"Monad","index":"5.6"}]}],"copyright":{"author":"Humphrey","link":"<a href=\"https://rdhuang.gitee.io/2021/11/30/函数式编程/\" title=\"函数式编程\">https://rdhuang.gitee.io/2021/11/30/函数式编程/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}