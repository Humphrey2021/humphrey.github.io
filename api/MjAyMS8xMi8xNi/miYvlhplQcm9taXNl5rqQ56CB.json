{"title":"手写Promise源码","date":"2021-12-16T12:05:44.000Z","date_formatted":{"ll":"Dec 16, 2021","L":"12/16/2021","MM-DD":"12-16"},"link":"2021/12/16/手写Promise源码","tags":["Promise","javascript","源码"],"categories":["前端"],"updated":"2021-12-22T12:44:49.867Z","content":"<p>从简单到复杂一步步实现自己的<code>Promise</code></p>\n<blockquote>\n<p>因为不好拆解，如果想直接看最终版，请跳转到文章末尾最后一个代码块</p>\n</blockquote>\n<h2 id=\"在手写源码的之前，首先需要知道promise是什么，都做了哪些操作\">在手写源码的之前，首先需要知道<code>Promise</code>是什么，都做了哪些操作<a title=\"#在手写源码的之前，首先需要知道promise是什么，都做了哪些操作\" href=\"#在手写源码的之前，首先需要知道promise是什么，都做了哪些操作\"></a></h2>\n<ol>\n<li>\n<p><code>Promise</code>是一个类,在执行这个类的时候，需要传递一个执行器进去，执行器会立即执行</p>\n</li>\n<li>\n<p><code>Promise</code>中有三种状态，分别为 成功(<code>fulfilled</code>) 、失败(<code>rejected</code>)、等待(<code>pending</code>)。只能从等待到成功或者失败，且一旦状态确定就不可更改</p>\n</li>\n<li>\n<p><code>resolve</code>和<code>reject</code>函数是用来更改状态的</p>\n</li>\n<li>\n<p><code>then</code>方法做的事情就是判断状态，根据不同的状态调用不同的回调函数，<code>then</code>方法是被定义在原型对象上的</p>\n</li>\n<li>\n<p><code>then</code>成功和失败时都会有一个参数，来表示成功或失败后的值或原因</p>\n</li>\n<li>\n<p>同一个<code>promise</code>对象下面的<code>then</code>方法是可以被调用多次的</p>\n</li>\n<li>\n<p><code>then</code>方法是可以被链式调用的, 后面<code>then</code>方法的回调函数拿到值的是上一个<code>then</code>方法的回调函数的返回值</p>\n</li>\n</ol>\n<h2 id=\"promise类核心逻辑实现\">Promise类核心逻辑实现<a title=\"#promise类核心逻辑实现\" href=\"#promise类核心逻辑实现\"></a></h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> PENDING = <span class=\"string\">&#x27;pending&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> FULFILLED = <span class=\"string\">&#x27;fulfilled&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> REJECTED = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"title\">constructor</span> (<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">        executor(<span class=\"built_in\">this</span>.resolve, <span class=\"built_in\">this</span>.reject)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// promise 状态</span></span><br><span class=\"line\">    status = PENDING</span><br><span class=\"line\">    <span class=\"comment\">// 成功之后的值</span></span><br><span class=\"line\">    value = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"comment\">// 失败之后的原因</span></span><br><span class=\"line\">    reason = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    resolve = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 因为状态一旦确定就不可以更改，所以需要有一层判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status !== PENDING) <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"comment\">// 状态更改为成功</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.status = FULFILLED</span><br><span class=\"line\">        <span class=\"comment\">// 保存成功之后的值</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value = value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    reject = <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 因为状态一旦确定就不可以更改，所以需要有一层判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status !== PENDING) <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"comment\">// 状态更改为失败</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.status = REJECTED</span><br><span class=\"line\">        <span class=\"comment\">// 保存失败后的原因</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.reason = reason</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    then (successCallback, failCallback) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status === FULFILLED) &#123;</span><br><span class=\"line\">            successCallback(<span class=\"built_in\">this</span>.value)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status === REJECTED) &#123;</span><br><span class=\"line\">            failCallback(<span class=\"built_in\">this</span>.reason)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = MyPromise</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>至此，我们实现了一个最简单版本的 Promise</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实现功能</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> MyPromise = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./MyPromise&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> MyPromise(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;promise&#x27;</span>)</span><br><span class=\"line\">    resolve(<span class=\"string\">&#x27;success&#x27;</span>)</span><br><span class=\"line\">    reject(<span class=\"string\">&#x27;error&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(value), <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> <span class=\"built_in\">console</span>.log(reason))</span><br><span class=\"line\"><span class=\"comment\">// promise</span></span><br><span class=\"line\"><span class=\"comment\">// success</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"加入异步逻辑\">加入异步逻辑<a title=\"#加入异步逻辑\" href=\"#加入异步逻辑\"></a></h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> PENDING = <span class=\"string\">&#x27;pending&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> FULFILLED = <span class=\"string\">&#x27;fulfilled&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> REJECTED = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"title\">constructor</span> (<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">        executor(<span class=\"built_in\">this</span>.resolve, <span class=\"built_in\">this</span>.reject)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// promise 状态</span></span><br><span class=\"line\">    status = PENDING</span><br><span class=\"line\">    <span class=\"comment\">// 成功之后的值</span></span><br><span class=\"line\">    value = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"comment\">// 失败之后的原因</span></span><br><span class=\"line\">    reason = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"comment\">// 成功之后的回调</span></span><br><span class=\"line\">    successCallback = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"comment\">// 失败之后的回调</span></span><br><span class=\"line\">    failCallback = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    resolve = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 因为状态一旦确定就不可以更改，所以需要有一层判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status !== PENDING) <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"comment\">// 状态更改为成功</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.status = FULFILLED</span><br><span class=\"line\">        <span class=\"comment\">// 保存成功之后的值</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value = value</span><br><span class=\"line\">        <span class=\"comment\">// 判断成功回调是否存在，存在则调用</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.successCallback &amp;&amp; <span class=\"built_in\">this</span>.successCallback(<span class=\"built_in\">this</span>.value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    reject = <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 因为状态一旦确定就不可以更改，所以需要有一层判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status !== PENDING) <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"comment\">// 状态更改为失败</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.status = REJECTED</span><br><span class=\"line\">        <span class=\"comment\">// 保存失败后的原因</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.reason = reason</span><br><span class=\"line\">        <span class=\"comment\">// 判断失败回调是否存在，存在则调用</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.failCallback &amp;&amp; <span class=\"built_in\">this</span>.failCallback(<span class=\"built_in\">this</span>.reason)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    then (successCallback, failCallback) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status === FULFILLED) &#123;</span><br><span class=\"line\">            successCallback(<span class=\"built_in\">this</span>.value)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status === REJECTED) &#123;</span><br><span class=\"line\">            failCallback(<span class=\"built_in\">this</span>.reason)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 状态是等待</span></span><br><span class=\"line\">            <span class=\"comment\">// 此时需要将callback存储起来</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.successCallback = successCallback</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.failCallback = failCallback</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = MyPromise</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实现功能</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> MyPromise = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./MyPromise&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> MyPromise(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;promise&#x27;</span>)</span><br><span class=\"line\">        resolve(<span class=\"string\">&#x27;success&#x27;</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>)</span><br><span class=\"line\">    <span class=\"comment\">// reject(&#x27;error&#x27;)</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(value), <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> <span class=\"built_in\">console</span>.log(reason))</span><br><span class=\"line\"><span class=\"comment\">// 2秒后输出 promise    success</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"实现-then-方法多次调用添加多个处理函数\">实现 then 方法多次调用添加多个处理函数<a title=\"#实现-then-方法多次调用添加多个处理函数\" href=\"#实现-then-方法多次调用添加多个处理函数\"></a></h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> PENDING = <span class=\"string\">&#x27;pending&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> FULFILLED = <span class=\"string\">&#x27;fulfilled&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> REJECTED = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"title\">constructor</span> (<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">        executor(<span class=\"built_in\">this</span>.resolve, <span class=\"built_in\">this</span>.reject)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// promise 状态</span></span><br><span class=\"line\">    status = PENDING</span><br><span class=\"line\">    <span class=\"comment\">// 成功之后的值</span></span><br><span class=\"line\">    value = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"comment\">// 失败之后的原因</span></span><br><span class=\"line\">    reason = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"comment\">// 成功之后的回调</span></span><br><span class=\"line\">    successCallback = []</span><br><span class=\"line\">    <span class=\"comment\">// 失败之后的回调</span></span><br><span class=\"line\">    failCallback = []</span><br><span class=\"line\">    resolve = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 因为状态一旦确定就不可以更改，所以需要有一层判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status !== PENDING) <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"comment\">// 状态更改为成功</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.status = FULFILLED</span><br><span class=\"line\">        <span class=\"comment\">// 保存成功之后的值</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value = value</span><br><span class=\"line\">        <span class=\"comment\">// 判断成功回调是否存在，存在则调用</span></span><br><span class=\"line\">        <span class=\"comment\">// this.successCallback &amp;&amp; this.successCallback(this.value)</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"built_in\">this</span>.successCallback.length) <span class=\"built_in\">this</span>.successCallback.shift()(<span class=\"built_in\">this</span>.value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    reject = <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 因为状态一旦确定就不可以更改，所以需要有一层判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status !== PENDING) <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"comment\">// 状态更改为失败</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.status = REJECTED</span><br><span class=\"line\">        <span class=\"comment\">// 保存失败后的原因</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.reason = reason</span><br><span class=\"line\">        <span class=\"comment\">// 判断失败回调是否存在，存在则调用</span></span><br><span class=\"line\">        <span class=\"comment\">// this.failCallback &amp;&amp; this.failCallback(this.reason)</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"built_in\">this</span>.failCallback.length) <span class=\"built_in\">this</span>.failCallback.shift()(<span class=\"built_in\">this</span>.reason)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    then (successCallback, failCallback) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status === FULFILLED) &#123;</span><br><span class=\"line\">            successCallback(<span class=\"built_in\">this</span>.value)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status === REJECTED) &#123;</span><br><span class=\"line\">            failCallback(<span class=\"built_in\">this</span>.reason)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 状态是等待</span></span><br><span class=\"line\">            <span class=\"comment\">// 此时需要将callback存储起来</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.successCallback.push(successCallback)</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.failCallback.push(failCallback)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = MyPromise</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实现功能</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> MyPromise = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./MyPromise&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> MyPromise(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;promise&#x27;</span>)</span><br><span class=\"line\">        resolve(<span class=\"string\">&#x27;success&#x27;</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>)</span><br><span class=\"line\">    <span class=\"comment\">// reject(&#x27;error&#x27;)</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(value), <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> <span class=\"built_in\">console</span>.log(reason))</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(value), <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> <span class=\"built_in\">console</span>.log(reason))</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(value), <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> <span class=\"built_in\">console</span>.log(reason))</span><br><span class=\"line\"><span class=\"comment\">// 2秒后输出 promise success success success</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"实现then方法的链式调用\">实现then方法的链式调用<a title=\"#实现then方法的链式调用\" href=\"#实现then方法的链式调用\"></a></h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> PENDING = <span class=\"string\">&#x27;pending&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> FULFILLED = <span class=\"string\">&#x27;fulfilled&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> REJECTED = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"title\">constructor</span> (<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">        executor(<span class=\"built_in\">this</span>.resolve, <span class=\"built_in\">this</span>.reject)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// promise 状态</span></span><br><span class=\"line\">    status = PENDING</span><br><span class=\"line\">    <span class=\"comment\">// 成功之后的值</span></span><br><span class=\"line\">    value = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"comment\">// 失败之后的原因</span></span><br><span class=\"line\">    reason = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"comment\">// 成功之后的回调</span></span><br><span class=\"line\">    successCallback = []</span><br><span class=\"line\">    <span class=\"comment\">// 失败之后的回调</span></span><br><span class=\"line\">    failCallback = []</span><br><span class=\"line\">    resolve = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 因为状态一旦确定就不可以更改，所以需要有一层判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status !== PENDING) <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"comment\">// 状态更改为成功</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.status = FULFILLED</span><br><span class=\"line\">        <span class=\"comment\">// 保存成功之后的值</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value = value</span><br><span class=\"line\">        <span class=\"comment\">// 判断成功回调是否存在，存在则调用</span></span><br><span class=\"line\">        <span class=\"comment\">// this.successCallback &amp;&amp; this.successCallback(this.value)</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"built_in\">this</span>.successCallback.length) <span class=\"built_in\">this</span>.successCallback.shift()(<span class=\"built_in\">this</span>.value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    reject = <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 因为状态一旦确定就不可以更改，所以需要有一层判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status !== PENDING) <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"comment\">// 状态更改为失败</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.status = REJECTED</span><br><span class=\"line\">        <span class=\"comment\">// 保存失败后的原因</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.reason = reason</span><br><span class=\"line\">        <span class=\"comment\">// 判断失败回调是否存在，存在则调用</span></span><br><span class=\"line\">        <span class=\"comment\">// this.failCallback &amp;&amp; this.failCallback(this.reason)</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"built_in\">this</span>.failCallback.length) <span class=\"built_in\">this</span>.failCallback.shift()(<span class=\"built_in\">this</span>.reason)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    then (successCallback, failCallback) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// then 方法返回的是一个 promise</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 判断状态</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status === FULFILLED) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> v = successCallback(<span class=\"built_in\">this</span>.value)</span><br><span class=\"line\">                <span class=\"comment\">// 判断 v 的值是普通值还是promise对象</span></span><br><span class=\"line\">                <span class=\"comment\">// 如果是普通值，直接调用 resolve</span></span><br><span class=\"line\">                <span class=\"comment\">// 如果是 promise 对象，查看promise对象返回的结果</span></span><br><span class=\"line\">                <span class=\"comment\">// 再根据promise对象返回的结果，决定调用resolve还是reject</span></span><br><span class=\"line\">                resolvePromise(v, resolve, reject)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status === REJECTED) &#123;</span><br><span class=\"line\">                failCallback(<span class=\"built_in\">this</span>.reason)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 状态是等待</span></span><br><span class=\"line\">                <span class=\"comment\">// 此时需要将callback存储起来</span></span><br><span class=\"line\">                <span class=\"built_in\">this</span>.successCallback.push(successCallback)</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.failCallback.push(failCallback)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolvePromise</span> (<span class=\"params\">v, resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (v <span class=\"keyword\">instanceof</span> MyPromise) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// v.then(value =&gt; resolve(value), reason =&gt; reject(reason))</span></span><br><span class=\"line\">        v.then(resolve, reject)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        resolve(v)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = MyPromise</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实现功能</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> MyPromise = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./MyPromise&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> MyPromise(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">&#x27;success&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">other</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(<span class=\"string\">&#x27;other&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> other()</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// success</span></span><br><span class=\"line\"><span class=\"comment\">// other</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"*终版-(针对一些异常情况并没有做处理)\">*终版 (针对一些异常情况并没有做处理)<a title=\"#*终版-(针对一些异常情况并没有做处理)\" href=\"#*终版-(针对一些异常情况并没有做处理)\"></a></h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> PENDING = <span class=\"string\">&#x27;pending&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> FULFILLED = <span class=\"string\">&#x27;fulfilled&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> REJECTED = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">executor</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果在执行执行器的时候报错了，需要捕获错误情况</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 传入立即执行的执行器</span></span><br><span class=\"line\">            executor(<span class=\"built_in\">this</span>.resolve, <span class=\"built_in\">this</span>.reject)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.reject(e)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// promise 状态</span></span><br><span class=\"line\">    status = PENDING</span><br><span class=\"line\">    <span class=\"comment\">// 成功之后的值</span></span><br><span class=\"line\">    value = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"comment\">// 失败之后的原因</span></span><br><span class=\"line\">    reason = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"comment\">// 成功之后的回调</span></span><br><span class=\"line\">    successCallback = []</span><br><span class=\"line\">    <span class=\"comment\">// 失败之后的回调</span></span><br><span class=\"line\">    failCallback = []</span><br><span class=\"line\">    resolve = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 因为状态一旦确定就不可以更改，所以需要有一层判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status !== PENDING) <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"comment\">// 状态更改为成功</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.status = FULFILLED</span><br><span class=\"line\">        <span class=\"comment\">// 保存成功之后的值</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value = value</span><br><span class=\"line\">        <span class=\"comment\">// 判断成功回调是否存在，存在则调用</span></span><br><span class=\"line\">        <span class=\"comment\">// this.successCallback &amp;&amp; this.successCallback(this.value)</span></span><br><span class=\"line\">        <span class=\"comment\">// 当使用 then 方法多次调用时，添加多个处理函数</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"built_in\">this</span>.successCallback.length) <span class=\"built_in\">this</span>.successCallback.shift()()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    reject = <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 因为状态一旦确定就不可以更改，所以需要有一层判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status !== PENDING) <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"comment\">// 状态更改为失败</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.status = REJECTED</span><br><span class=\"line\">        <span class=\"comment\">// 保存失败后的原因</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.reason = reason</span><br><span class=\"line\">        <span class=\"comment\">// 判断失败回调是否存在，存在则调用</span></span><br><span class=\"line\">        <span class=\"comment\">// this.failCallback &amp;&amp; this.failCallback(this.reason)</span></span><br><span class=\"line\">        <span class=\"comment\">// 当使用 then 方法多次调用时，添加多个处理函数</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"built_in\">this</span>.failCallback.length) <span class=\"built_in\">this</span>.failCallback.shift()()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">then</span>(<span class=\"params\">successCallback, failCallback</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 实现 .then() 参数可选</span></span><br><span class=\"line\">        successCallback = successCallback ? successCallback : <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value</span><br><span class=\"line\">        failCallback = failCallback ? failCallback : <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123; <span class=\"keyword\">throw</span> reason &#125;</span><br><span class=\"line\">        <span class=\"comment\">// then 方法返回的是一个 promise，实现链式调用</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> promise2 = <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 判断状态</span></span><br><span class=\"line\">            <span class=\"comment\">// 判断当状态为成功时，调用成功回调</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status === FULFILLED) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 如果 then 方法在执行过程中报错，需要捕获到这个错误，并提示出来</span></span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> v = successCallback(<span class=\"built_in\">this</span>.value)</span><br><span class=\"line\">                        <span class=\"comment\">// 判断 v 的值是普通值还是promise对象</span></span><br><span class=\"line\">                        <span class=\"comment\">// 如果是普通值，直接调用 resolve</span></span><br><span class=\"line\">                        <span class=\"comment\">// 如果是 promise 对象，查看promise对象返回的结果</span></span><br><span class=\"line\">                        <span class=\"comment\">// 再根据promise对象返回的结果，决定调用resolve还是reject</span></span><br><span class=\"line\">                        resolvePromise(promise2, v, resolve, reject) <span class=\"comment\">// 此时primise2还获取不到，所以需要将此编程异步代码</span></span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                        reject(e)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status === REJECTED) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 如果 then 方法在执行过程中报错，需要捕获到这个错误，并提示出来</span></span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 当状态为失败时，调用失败回调</span></span><br><span class=\"line\">                        <span class=\"keyword\">let</span> v = failCallback(<span class=\"built_in\">this</span>.reason)</span><br><span class=\"line\">                        <span class=\"comment\">// 判断 v 的值是普通值还是promise对象</span></span><br><span class=\"line\">                        <span class=\"comment\">// 如果是普通值，直接调用 resolve</span></span><br><span class=\"line\">                        <span class=\"comment\">// 如果是 promise 对象，查看promise对象返回的结果</span></span><br><span class=\"line\">                        <span class=\"comment\">// 再根据promise对象返回的结果，决定调用resolve还是reject</span></span><br><span class=\"line\">                        resolvePromise(promise2, v, resolve, reject) <span class=\"comment\">// 此时primise2还获取不到，所以需要将此编程异步代码</span></span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                        reject(e)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 状态是等待，意味着是异步操作的时候</span></span><br><span class=\"line\">                <span class=\"comment\">// 此时需要将callback存储起来</span></span><br><span class=\"line\">                <span class=\"built_in\">this</span>.successCallback.push(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 如果 then 方法在执行过程中报错，需要捕获到这个错误，并提示出来</span></span><br><span class=\"line\">                        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">let</span> v = successCallback(<span class=\"built_in\">this</span>.value)</span><br><span class=\"line\">                            <span class=\"comment\">// 判断 v 的值是普通值还是promise对象</span></span><br><span class=\"line\">                            <span class=\"comment\">// 如果是普通值，直接调用 resolve</span></span><br><span class=\"line\">                            <span class=\"comment\">// 如果是 promise 对象，查看promise对象返回的结果</span></span><br><span class=\"line\">                            <span class=\"comment\">// 再根据promise对象返回的结果，决定调用resolve还是reject</span></span><br><span class=\"line\">                            resolvePromise(promise2, v, resolve, reject) <span class=\"comment\">// 此时primise2还获取不到，所以需要将此编程异步代码</span></span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                            reject(e)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.failCallback.push(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 如果 then 方法在执行过程中报错，需要捕获到这个错误，并提示出来</span></span><br><span class=\"line\">                        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                            <span class=\"comment\">// 当状态为失败时，调用失败回调</span></span><br><span class=\"line\">                            <span class=\"keyword\">let</span> v = failCallback(<span class=\"built_in\">this</span>.reason)</span><br><span class=\"line\">                            <span class=\"comment\">// 判断 v 的值是普通值还是promise对象</span></span><br><span class=\"line\">                            <span class=\"comment\">// 如果是普通值，直接调用 resolve</span></span><br><span class=\"line\">                            <span class=\"comment\">// 如果是 promise 对象，查看promise对象返回的结果</span></span><br><span class=\"line\">                            <span class=\"comment\">// 再根据promise对象返回的结果，决定调用resolve还是reject</span></span><br><span class=\"line\">                            resolvePromise(promise2, v, resolve, reject) <span class=\"comment\">// 此时primise2还获取不到，所以需要将此编程异步代码</span></span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                            reject(e)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> promise2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 实现 catch 方法</span></span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (failCallback) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// catch 方式其实就是 then 方法，只是第一个参数传入 undefined 就ok了</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.then(<span class=\"literal\">undefined</span>, failCallback)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 谁先 finally 方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">finally</span>(<span class=\"params\">callback</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果成功失败都会执行，所以不依赖状态</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> MyPromise.resolve(callback()).then(<span class=\"function\">() =&gt;</span> value)</span><br><span class=\"line\">            <span class=\"comment\">// callback()</span></span><br><span class=\"line\">            <span class=\"comment\">// return value</span></span><br><span class=\"line\">        &#125;, <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> MyPromise.resolve(callback()).then(<span class=\"function\">() =&gt;</span> &#123; <span class=\"keyword\">throw</span> reason &#125;)</span><br><span class=\"line\">            <span class=\"comment\">// callback()</span></span><br><span class=\"line\">            <span class=\"comment\">// throw reason</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 实现 all 方法，接收一个数组参数</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"title\">all</span>(<span class=\"params\">array</span>)</span> &#123; <span class=\"comment\">// 基础版，未考虑异常情况，没有对传入数据做校验，默认传值是正确的</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> result = [] <span class=\"comment\">// 返回值</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> index = <span class=\"number\">0</span> <span class=\"comment\">// 索引</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 添加数据h桉树，key 即索引</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addData</span>(<span class=\"params\">key, value</span>) </span>&#123;</span><br><span class=\"line\">                result[key] = value <span class=\"comment\">// 将结果传入返回值中</span></span><br><span class=\"line\">                index++ <span class=\"comment\">// 每次添加都自增 1</span></span><br><span class=\"line\">                <span class=\"comment\">// 因为可能内部存在异步代码，for循环是立即执行完成，所以，需要在判断全部相等之后，再去返回 resolve</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (index === array.length) &#123; <span class=\"comment\">// 判断，只有当所有的全部添加完成之后，返回 resolve</span></span><br><span class=\"line\">                    resolve(result)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 循环遍历传入的数组参数</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> current = array[i] <span class=\"comment\">// 拿到当前的值</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (current <span class=\"keyword\">instanceof</span> MyPromise) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// promise 对象</span></span><br><span class=\"line\">                    current.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123; addData(i, value) &#125;, <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> reject(error))</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 普通值</span></span><br><span class=\"line\">                    addData(i, array[i])</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 实现静态 resolve 方法， 传入参数</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"title\">resolve</span>(<span class=\"params\">value</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断参数是否为 promise，如果是，直接返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> MyPromise) <span class=\"keyword\">return</span> value</span><br><span class=\"line\">        <span class=\"comment\">// 如果是一个普通值，则返回 promise，在 resolve中传入 value</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> resolve(value))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolvePromise</span>(<span class=\"params\">promise2, v, resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果返回的primise同当前的promise是同一个promise，则报错并return 阻止程序继续向下执行</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (promise2 === v) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> reject(<span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">&#x27;Chaining cycle detected for promise #&lt;Promise&gt;&#x27;</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (v <span class=\"keyword\">instanceof</span> MyPromise) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// v.then(value =&gt; resolve(value), reason =&gt; reject(reason))</span></span><br><span class=\"line\">        v.then(resolve, reject)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        resolve(v)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = MyPromise</span><br></pre></td></tr></table></figure>\n","prev":{"title":"模块化","link":"2021/12/21/模块化"},"next":{"title":"JavaScript异步编程","link":"2021/12/02/JavaScript异步编程"},"plink":"https://rdhuang.gitee.io/2021/12/16/手写Promise源码/","toc":[{"id":"在手写源码的之前，首先需要知道promise是什么，都做了哪些操作","title":"在手写源码的之前，首先需要知道Promise是什么，都做了哪些操作","index":"1"},{"id":"promise类核心逻辑实现","title":"Promise类核心逻辑实现","index":"2"},{"id":"加入异步逻辑","title":"加入异步逻辑","index":"3"},{"id":"实现-then-方法多次调用添加多个处理函数","title":"实现 then 方法多次调用添加多个处理函数","index":"4"},{"id":"实现then方法的链式调用","title":"实现then方法的链式调用","index":"5"},{"id":"*终版-(针对一些异常情况并没有做处理)","title":"*终版 (针对一些异常情况并没有做处理)","index":"6"}],"copyright":{"author":"Humphrey","link":"<a href=\"https://rdhuang.gitee.io/2021/12/16/手写Promise源码/\" title=\"手写Promise源码\">https://rdhuang.gitee.io/2021/12/16/手写Promise源码/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}