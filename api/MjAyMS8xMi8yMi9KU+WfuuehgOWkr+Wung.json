{"title":"JS基础夯实","date":"2021-12-22T13:30:34.000Z","date_formatted":{"ll":"Dec 22, 2021","L":"12/22/2021","MM-DD":"12-22"},"link":"2021/12/22/JS基础夯实","tags":["JS执行流程","javascript"],"categories":["前端"],"updated":"2021-12-27T06:00:22.859Z","content":"<h3 id=\"基本名词\">基本名词<a title=\"#基本名词\" href=\"#基本名词\"></a></h3>\n<h4 id=\"js-的执行平台\">JS 的执行平台<a title=\"#js-的执行平台\" href=\"#js-的执行平台\"></a></h4>\n<ol>\n<li>在各种浏览器中</li>\n<li>在Node中</li>\n<li>在webView中</li>\n<li>不论什么平台，都需要有一个执行 js 代码的环境，即执行环境</li>\n</ol>\n<h4 id=\"执行环境\">执行环境<a title=\"#执行环境\" href=\"#执行环境\"></a></h4>\n<ol>\n<li>我们写的代码，最终都是在设备的物理硬件上运行的，即内存条</li>\n<li>js 代码在执行时会在内存中生成一个栈（先进后出）空间，本质上就是内存条中拿出一个空间</li>\n<li>每当浏览器加载页面时，就会从计算机的内存中申请一片内存空间用来执行 js 代码（执行环境栈【ESC】）</li>\n</ol>\n<h4 id=\"执行上下文\">执行上下文<a title=\"#执行上下文\" href=\"#执行上下文\"></a></h4>\n<ol>\n<li>一个js文件会包含多条代码，不同行组合在一个就是一个代码段</li>\n<li>js 代码在执行的时候，会将代码段都放入到执行环境栈当中运行</li>\n<li>为了解决不同代码段之间存在的冲突问题，所以每个代码段都会有一个包裹自己本段代码的环境，即：执行上下文。</li>\n</ol>\n<h4 id=\"进栈执行\">进栈执行<a title=\"#进栈执行\" href=\"#进栈执行\"></a></h4>\n<p>一个动作，将执行上下文放入执行环境栈中执行的过程就是进栈执行</p>\n<h4 id=\"ec(g)-全局执行上下文\">EC(G) 全局执行上下文<a title=\"#ec(g)-全局执行上下文\" href=\"#ec(g)-全局执行上下文\"></a></h4>\n<p>浏览器在加载界面的时候默认创建</p>\n<h4 id=\"vo(g)-全局变量对象\">VO(G) 全局变量对象<a title=\"#vo(g)-全局变量对象\" href=\"#vo(g)-全局变量对象\"></a></h4>\n<p>用于存放全局上下文中声明和定义的变量，自动存储了 window 变量，window变量指向 GO 全局对象</p>\n<h4 id=\"ao-活动对象\">AO 活动对象<a title=\"#ao-活动对象\" href=\"#ao-活动对象\"></a></h4>\n<p>在某一个函数执行上下文中会存在 AO 用于存放当前函数内部的变量数据</p>\n<h4 id=\"go-全局对象\">GO 全局对象<a title=\"#go-全局对象\" href=\"#go-全局对象\"></a></h4>\n<p>存放了如 setTimeout、JSON、Math … 这些</p>\n<h4 id=\"声明\">声明<a title=\"#声明\" href=\"#声明\"></a></h4>\n<p>var let const function 如： var name</p>\n<h4 id=\"定义\">定义<a title=\"#定义\" href=\"#定义\"></a></h4>\n<p>给某一个变量执行赋值操作 如 name = ‘xxx’</p>\n<h3 id=\"堆栈\">堆栈<a title=\"#堆栈\" href=\"#堆栈\"></a></h3>\n<h4 id=\"堆栈中的基本值\">堆栈中的基本值<a title=\"#堆栈中的基本值\" href=\"#堆栈中的基本值\"></a></h4>\n<p>String Number Boolean null undefined<br>\n基本数据类型是直接存放在栈区</p>\n<h4 id=\"堆栈中的引用类型\">堆栈中的引用类型<a title=\"#堆栈中的引用类型\" href=\"#堆栈中的引用类型\"></a></h4>\n<p>引用类型是存放在堆区（堆内存）</p>\n<h4 id=\"堆栈中的函数（-函数-+-对象-）\">堆栈中的函数（ 函数 + 对象 ）<a title=\"#堆栈中的函数（-函数-+-对象-）\" href=\"#堆栈中的函数（-函数-+-对象-）\"></a></h4>\n<h5 id=\"函数的创建\">函数的创建<a title=\"#函数的创建\" href=\"#函数的创建\"></a></h5>\n<ol>\n<li>函数在变量提升阶段，同时将声明和定义都做了</li>\n<li>词法作用域（当前函数的作用域和它在哪被调用的没关系，只看它在哪定义的）</li>\n</ol>\n<h5 id=\"函数的调用\">函数的调用<a title=\"#函数的调用\" href=\"#函数的调用\"></a></h5>\n","prev":{"title":"ECMAScript","link":"2021/12/27/ECMAScript"},"next":{"title":"模块化","link":"2021/12/21/模块化"},"plink":"https://rdhuang.gitee.io/2021/12/22/JS基础夯实/","toc":[{"id":"基本名词","title":"基本名词","index":"1"},{"id":"堆栈","title":"堆栈","index":"2"}],"copyright":{"author":"Humphrey","link":"<a href=\"https://rdhuang.gitee.io/2021/12/22/JS基础夯实/\" title=\"JS基础夯实\">https://rdhuang.gitee.io/2021/12/22/JS基础夯实/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}