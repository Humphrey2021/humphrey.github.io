{"title":"JavaScript异步编程","date":"2021-12-02T12:12:38.000Z","date_formatted":{"ll":"Dec 2, 2021","L":"12/02/2021","MM-DD":"12-02"},"link":"2021/12/02/JavaScript异步编程","tags":["javascript","异步编程"],"categories":["前端"],"updated":"2021-12-11T11:59:38.766Z","content":"<h2 id=\"js异步编程的介绍\">JS异步编程的介绍<a title=\"#js异步编程的介绍\" href=\"#js异步编程的介绍\"></a></h2>\n<p>首先说说为什么会有<code>JS</code>异步编程<br>\n众所周知，<code>JS</code>是单线程模式工作的，因为<code>JS</code>是运行在浏览器端的脚本语言，目的是为了实现页面的交互，那么因为页面交互主要是DOM操作，从而决定了它必须使用单线程模式工作，否则就会出现特别复杂的线程同步问题。<br>\n这种模式优点是更安全、更简单，缺点就是如果在代码执行中遇到一个特别耗时的操作，那么后面的代码就必须等待这个操作结束以后才可以执行。<br>\n所以，为了解决像这样的情况，<code>JS</code>将任务的执行模式分成了两种，分别是<strong>同步模式(Synchronous)<strong>和</strong>异步模式(Asynchronous)</strong></p>\n<h3 id=\"同步模式和异步模式\">同步模式和异步模式<a title=\"#同步模式和异步模式\" href=\"#同步模式和异步模式\"></a></h3>\n<ul>\n<li>同步模式</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;global begin&#x27;</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;bar&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;foo&#x27;</span>)</span><br><span class=\"line\">    bar()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;global end&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// global begin</span></span><br><span class=\"line\"><span class=\"comment\">// foo</span></span><br><span class=\"line\"><span class=\"comment\">// bar</span></span><br><span class=\"line\"><span class=\"comment\">// global end</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>异步模式</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;g1 begin&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timer1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;timer1&#x27;</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">1800</span>) <span class=\"comment\">// 这里如果把时间改为 &gt;= 2000 则结果 timer1 会在 timer3 之后打印</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timer2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;timer2&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timer3</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;timer3&#x27;</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;g1 end&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// g1 begin</span></span><br><span class=\"line\"><span class=\"comment\">// g1 end</span></span><br><span class=\"line\"><span class=\"comment\">// timer2</span></span><br><span class=\"line\"><span class=\"comment\">// timer1</span></span><br><span class=\"line\"><span class=\"comment\">// timer3</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"回调函数\">回调函数<a title=\"#回调函数\" href=\"#回调函数\"></a></h3>\n<p>所有异步编程方案的根基</p>\n<h3 id=\"promise\">Promise<a title=\"#promise\" href=\"#promise\"></a></h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax</span> (<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\">        xhr.open(<span class=\"string\">&#x27;GET&#x27;</span>, url)</span><br><span class=\"line\">        xhr.responseType = <span class=\"string\">&#x27;json&#x27;</span></span><br><span class=\"line\">        xhr.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">                resolve(<span class=\"built_in\">this</span>.response)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"built_in\">this</span>.statusText))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        xhr.send()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 方案一</span></span><br><span class=\"line\">ajax(<span class=\"string\">&#x27;/api/urls.json&#x27;</span>)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onFulfilled</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;onFulfilled&#x27;</span>, res)</span><br><span class=\"line\">    &#125;, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRejected</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;onRejected&#x27;</span>, err)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"><span class=\"comment\">// 方案二</span></span><br><span class=\"line\">ajax(<span class=\"string\">&#x27;/api/urls.json&#x27;</span>)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onFulfilled</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;onFulfilled&#x27;</span>, res)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRejected</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;onRejected&#x27;</span>, err)</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"全局捕获异常*\">全局捕获异常*<a title=\"#全局捕获异常*\" href=\"#全局捕获异常*\"></a></h4>\n<ul>\n<li>unhandledrejection</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在浏览器上</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">&#x27;unhandledrejection&#x27;</span>, <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; reason, promise &#125; = event</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(reason, promise)</span><br><span class=\"line\">    <span class=\"comment\">// reason =&gt; Promise 失败原因，一般是一个错误对象</span></span><br><span class=\"line\">    <span class=\"comment\">// promise =&gt; 出现异常的 Promise 对象</span></span><br><span class=\"line\">    event.preventDefault()</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>)</span><br><span class=\"line\"><span class=\"comment\">// 在 node 上</span></span><br><span class=\"line\">process.on(<span class=\"string\">&#x27;unhandledRejection&#x27;</span>, <span class=\"function\">(<span class=\"params\">reason, promise</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(reason, promise)</span><br><span class=\"line\">    <span class=\"comment\">// reason =&gt; Promise 失败原因，一般是一个错误对象</span></span><br><span class=\"line\">    <span class=\"comment\">// promise =&gt; 出现异常的 Promise 对象</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"事件循环和消息队列\">事件循环和消息队列<a title=\"#事件循环和消息队列\" href=\"#事件循环和消息队列\"></a></h3>\n<p>异步编程的几种方式</p>\n<p>Promise异步方案、宏任务/微任务队列</p>\n<p>Generator异步方案、Async/Await语法糖</p>\n","prev":{"title":"login逻辑","link":"2021/12/11/login逻辑"},"next":{"title":"函数式编程","link":"2021/11/30/函数式编程"},"plink":"https://rdhuang.gitee.io/2021/12/02/JavaScript异步编程/","toc":[{"id":"js异步编程的介绍","title":"JS异步编程的介绍","index":"1","children":[{"id":"同步模式和异步模式","title":"同步模式和异步模式","index":"1.1"},{"id":"回调函数","title":"回调函数","index":"1.2"},{"id":"promise","title":"Promise","index":"1.3"},{"id":"事件循环和消息队列","title":"事件循环和消息队列","index":"1.4"}]}],"copyright":{"author":"Humphrey","link":"<a href=\"https://rdhuang.gitee.io/2021/12/02/JavaScript异步编程/\" title=\"JavaScript异步编程\">https://rdhuang.gitee.io/2021/12/02/JavaScript异步编程/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}