{"title":"JavaScript异步编程","date":"2021-12-02T12:12:38.000Z","date_formatted":{"ll":"Dec 2, 2021","L":"12/02/2021","MM-DD":"12-02"},"link":"2021/12/02/JavaScript异步编程","tags":["javascript","异步编程"],"categories":["前端"],"updated":"2021-12-16T12:00:51.566Z","content":"<h2 id=\"js异步编程的介绍\">JS异步编程的介绍<a title=\"#js异步编程的介绍\" href=\"#js异步编程的介绍\"></a></h2>\n<p>首先说说为什么会有<code>JS</code>异步编程<br>\n众所周知，<code>JS</code>是单线程模式工作的，因为<code>JS</code>是运行在浏览器端的脚本语言，目的是为了实现页面的交互，那么因为页面交互主要是DOM操作，从而决定了它必须使用单线程模式工作，否则就会出现特别复杂的线程同步问题。<br>\n这种模式优点是更安全、更简单，缺点就是如果在代码执行中遇到一个特别耗时的操作，那么后面的代码就必须等待这个操作结束以后才可以执行。<br>\n所以，为了解决像这样的情况，<code>JS</code>将任务的执行模式分成了两种，分别是<strong>同步模式(Synchronous)<strong>和</strong>异步模式(Asynchronous)</strong></p>\n<h3 id=\"同步模式和异步模式\">同步模式和异步模式<a title=\"#同步模式和异步模式\" href=\"#同步模式和异步模式\"></a></h3>\n<ul>\n<li>同步模式<br>\n至上而下依次执行，代码可读性高</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;global begin&#x27;</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;bar&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;foo&#x27;</span>)</span><br><span class=\"line\">    bar()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;global end&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// global begin</span></span><br><span class=\"line\"><span class=\"comment\">// foo</span></span><br><span class=\"line\"><span class=\"comment\">// bar</span></span><br><span class=\"line\"><span class=\"comment\">// global end</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>异步模式<br>\n通过事件循环和消息队列实现的</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;g1 begin&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timer1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;timer1&#x27;</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">1800</span>) <span class=\"comment\">// 这里如果把时间改为 &gt;= 2000 则结果 timer1 会在 timer3 之后打印</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timer2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;timer2&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timer3</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;timer3&#x27;</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;g1 end&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// g1 begin</span></span><br><span class=\"line\"><span class=\"comment\">// g1 end</span></span><br><span class=\"line\"><span class=\"comment\">// timer2</span></span><br><span class=\"line\"><span class=\"comment\">// timer1</span></span><br><span class=\"line\"><span class=\"comment\">// timer3</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"promise\">Promise<a title=\"#promise\" href=\"#promise\"></a></h3>\n<p>状态只有三种 PENDING FULFILLED REJECTED<br>\n单向转换，且状态不可再更改<br>\npending —&gt; fulfilled<br>\npending —&gt; rejected</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">&#x27;success&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// reject(&#x27;error&#x27;)</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>链式调用</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">&#x27;success&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">promise</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(v) <span class=\"comment\">// success</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;2&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"built_in\">console</span>.log(v)) <span class=\"comment\">// 2</span></span><br><span class=\"line\">    .then()</span><br><span class=\"line\">    .then()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>静态方法</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 直接成功</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve()</span><br><span class=\"line\"><span class=\"comment\">// 直接失败</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.reject()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Promise 并行</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">all() 和 race() 的区别</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all() <span class=\"comment\">// 是等待所有的异步任务都执行结束以后才会结束</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race() <span class=\"comment\">// 当有一个任务结束的时候就结束</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"宏任务、微任务\">宏任务、微任务<a title=\"#宏任务、微任务\" href=\"#宏任务、微任务\"></a></h3>\n<p>目前大部分异步调用都是作为宏任务执行的, 如：setTimeout…</p>\n<p>作为微任务处理的有：</p>\n<p>Promise 和 MutationObserver 和 nodeJs中的 process.nextTick</p>\n<h3 id=\"generator-生成器函数\">Generator 生成器函数<a title=\"#generator-生成器函数\" href=\"#generator-生成器函数\"></a></h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 带有 * 的函数为生成器函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> * <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;start&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// yield 会暂停执行，但不会结束，当下次再调用 next() 的时候会继续往下执行</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> res = <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;foo&#x27;</span> </span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 生成器函数调用不会立即执行</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> generator = foo()</span><br><span class=\"line\"><span class=\"comment\">// 当手动调用 next() 方法时才会执行</span></span><br><span class=\"line\"><span class=\"comment\">// 如果在next()中传入参数，则会作为 yield 语句的返回值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = generator.next(<span class=\"string\">&#x27;bar&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// result返回值 为一个对象，存在两个参数： value 和 done</span></span><br><span class=\"line\"><span class=\"comment\">// value 为 生成器函数 yield 的返回值</span></span><br><span class=\"line\"><span class=\"comment\">// done 为判断当前生成器是否全部执行完成 值为： true or false</span></span><br><span class=\"line\"><span class=\"comment\">// 当调用 throw 方法抛出异常时，可以在函数中通过 try catch 接收</span></span><br><span class=\"line\">generator.throw(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;Generator Error&#x27;</span>))</span><br></pre></td></tr></table></figure>\n<h3 id=\"async-/-await-语法糖\"><code>Async</code> / <code>Await</code> 语法糖<a title=\"#async-/-await-语法糖\" href=\"#async-/-await-语法糖\"></a></h3>\n<p>语言层面的异步编程标准<br>\n同<code>Generator</code>功能一样，只是把 <code>*</code> 换成 <code>async</code>, <code>yield</code>换成<code>await</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> xxx</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"全局捕获异常*\">全局捕获异常*<a title=\"#全局捕获异常*\" href=\"#全局捕获异常*\"></a></h4>\n<ul>\n<li>unhandledrejection</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在浏览器上</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">&#x27;unhandledrejection&#x27;</span>, <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; reason, promise &#125; = event</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(reason, promise)</span><br><span class=\"line\">    <span class=\"comment\">// reason =&gt; Promise 失败原因，一般是一个错误对象</span></span><br><span class=\"line\">    <span class=\"comment\">// promise =&gt; 出现异常的 Promise 对象</span></span><br><span class=\"line\">    event.preventDefault()</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>)</span><br><span class=\"line\"><span class=\"comment\">// 在 node 上</span></span><br><span class=\"line\">process.on(<span class=\"string\">&#x27;unhandledRejection&#x27;</span>, <span class=\"function\">(<span class=\"params\">reason, promise</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(reason, promise)</span><br><span class=\"line\">    <span class=\"comment\">// reason =&gt; Promise 失败原因，一般是一个错误对象</span></span><br><span class=\"line\">    <span class=\"comment\">// promise =&gt; 出现异常的 Promise 对象</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n","next":{"title":"函数式编程","link":"2021/11/30/函数式编程"},"plink":"https://rdhuang.gitee.io/2021/12/02/JavaScript异步编程/","toc":[{"id":"js异步编程的介绍","title":"JS异步编程的介绍","index":"1","children":[{"id":"同步模式和异步模式","title":"同步模式和异步模式","index":"1.1"},{"id":"promise","title":"Promise","index":"1.2"},{"id":"宏任务、微任务","title":"宏任务、微任务","index":"1.3"},{"id":"generator-生成器函数","title":"Generator 生成器函数","index":"1.4"},{"id":"async-/-await-语法糖","title":"Async &#x2F; Await 语法糖","index":"1.5"}]}],"copyright":{"author":"Humphrey","link":"<a href=\"https://rdhuang.gitee.io/2021/12/02/JavaScript异步编程/\" title=\"JavaScript异步编程\">https://rdhuang.gitee.io/2021/12/02/JavaScript异步编程/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}